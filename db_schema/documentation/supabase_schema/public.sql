-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.active_workout_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  template_id uuid NOT NULL,
  status character varying DEFAULT 'in_progress'::character varying CHECK (status::text = ANY (ARRAY['in_progress'::character varying, 'paused'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])),
  current_exercise_index integer DEFAULT 0,
  completed_exercises integer DEFAULT 0,
  total_exercises integer NOT NULL,
  elapsed_seconds integer DEFAULT 0,
  started_at timestamp with time zone NOT NULL DEFAULT now(),
  paused_at timestamp with time zone,
  resumed_at timestamp with time zone,
  completed_at timestamp with time zone,
  total_sets_completed integer DEFAULT 0,
  total_reps_completed integer DEFAULT 0,
  calories_burned integer DEFAULT 0,
  completed_exercise_ids jsonb DEFAULT '[]'::jsonb,
  exercise_data jsonb DEFAULT '{}'::jsonb,
  session_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT active_workout_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT active_workout_sessions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.workout_templates(id),
  CONSTRAINT active_workout_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.admin_access_audit (
  id bigint NOT NULL DEFAULT nextval('admin_access_audit_id_seq'::regclass),
  accessed_at timestamp with time zone NOT NULL DEFAULT now(),
  admin_user_id uuid,
  admin_email text,
  ip inet,
  action text,
  details jsonb,
  CONSTRAINT admin_access_audit_pkey PRIMARY KEY (id)
);
CREATE TABLE public.badges (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  description text NOT NULL,
  icon character varying NOT NULL,
  color character varying DEFAULT '#f1c40f'::character varying,
  category character varying DEFAULT 'achievement'::character varying,
  rarity character varying DEFAULT 'common'::character varying,
  points_value integer DEFAULT 10,
  requirement_type character varying,
  requirement_value integer,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT badges_pkey PRIMARY KEY (id)
);
CREATE TABLE public.bodyfat_profiles (
  user_id uuid NOT NULL,
  current_body_fat numeric NOT NULL CHECK (current_body_fat >= 3::numeric AND current_body_fat <= 60::numeric),
  goal_body_fat numeric NOT NULL CHECK (goal_body_fat >= 3::numeric AND goal_body_fat <= 60::numeric),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bodyfat_profiles_pkey PRIMARY KEY (user_id),
  CONSTRAINT bodyfat_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.challenge_progress (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  challenge_id uuid NOT NULL,
  user_id uuid NOT NULL,
  current_value integer DEFAULT 0,
  points_earned integer DEFAULT 0,
  rank integer,
  joined_at timestamp with time zone DEFAULT now(),
  last_updated timestamp with time zone DEFAULT now(),
  CONSTRAINT challenge_progress_pkey PRIMARY KEY (id),
  CONSTRAINT challenge_progress_challenge_id_fkey FOREIGN KEY (challenge_id) REFERENCES public.challenges(id),
  CONSTRAINT challenge_progress_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.challenges (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title character varying NOT NULL,
  description text NOT NULL,
  challenge_type character varying NOT NULL,
  metric_type character varying NOT NULL,
  target_value integer,
  start_date timestamp with time zone NOT NULL,
  end_date timestamp with time zone NOT NULL,
  prize_badge_id uuid,
  prize_description text,
  is_active boolean DEFAULT true,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT challenges_pkey PRIMARY KEY (id),
  CONSTRAINT challenges_prize_badge_id_fkey FOREIGN KEY (prize_badge_id) REFERENCES public.badges(id),
  CONSTRAINT challenges_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.channel_messages (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  channel_id text,
  user_id uuid,
  content text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT channel_messages_pkey PRIMARY KEY (id),
  CONSTRAINT channel_messages_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES public.channels(id),
  CONSTRAINT channel_messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.channels (
  id text NOT NULL,
  name text NOT NULL,
  icon text,
  category text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT channels_pkey PRIMARY KEY (id)
);
CREATE TABLE public.chats (
  id uuid NOT NULL,
  username text NOT NULL UNIQUE,
  avatar text DEFAULT 'ðŸ˜Š'::text,
  is_online boolean DEFAULT false,
  last_seen timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chats_pkey PRIMARY KEY (id),
  CONSTRAINT chats_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.daily_activity_tracking (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  tracking_date date NOT NULL DEFAULT CURRENT_DATE,
  steps_count integer DEFAULT 0,
  steps_goal integer DEFAULT 10000,
  steps_percentage numeric DEFAULT 0,
  workouts_completed integer DEFAULT 0,
  workouts_goal integer DEFAULT 1,
  workouts_percentage numeric DEFAULT 0,
  total_workout_minutes integer DEFAULT 0,
  total_calories_burned integer DEFAULT 0,
  calories_goal integer DEFAULT 500,
  calories_percentage numeric DEFAULT 0,
  is_goal_met boolean DEFAULT false,
  overall_progress numeric DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT daily_activity_tracking_pkey PRIMARY KEY (id),
  CONSTRAINT daily_activity_tracking_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.daily_meal_tracking (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  user_plan_id uuid,
  tracking_date date NOT NULL DEFAULT CURRENT_DATE,
  total_calories integer DEFAULT 0,
  total_protein integer DEFAULT 0,
  total_carbs integer DEFAULT 0,
  total_fats integer DEFAULT 0,
  total_fiber integer DEFAULT 0,
  target_calories integer NOT NULL,
  target_protein integer NOT NULL,
  target_carbs integer NOT NULL,
  target_fats integer NOT NULL,
  calories_percentage numeric,
  protein_percentage numeric,
  carbs_percentage numeric,
  fats_percentage numeric,
  is_complete boolean DEFAULT false,
  meals_logged integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT daily_meal_tracking_pkey PRIMARY KEY (id),
  CONSTRAINT daily_meal_tracking_user_plan_id_fkey FOREIGN KEY (user_plan_id) REFERENCES public.user_meal_plans(id),
  CONSTRAINT daily_meal_tracking_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.device_tokens (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  expo_token text NOT NULL UNIQUE,
  platform text CHECK (platform = ANY (ARRAY['ios'::text, 'android'::text, 'web'::text])),
  installed_at timestamp with time zone DEFAULT now(),
  last_seen_at timestamp with time zone,
  CONSTRAINT device_tokens_pkey PRIMARY KEY (id),
  CONSTRAINT device_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.direct_messages (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  conversation_id uuid,
  sender_id uuid,
  content text NOT NULL,
  is_read boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT direct_messages_pkey PRIMARY KEY (id),
  CONSTRAINT direct_messages_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.dm_conversations(id),
  CONSTRAINT direct_messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.dm_conversations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user1_id uuid,
  user2_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT dm_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT dm_conversations_user1_id_fkey FOREIGN KEY (user1_id) REFERENCES public.profiles(id),
  CONSTRAINT dm_conversations_user2_id_fkey FOREIGN KEY (user2_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.exercise_set_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid NOT NULL,
  exercise_id uuid NOT NULL,
  set_number integer NOT NULL,
  reps_completed integer,
  weight_kg numeric,
  duration_seconds integer,
  rest_seconds integer,
  difficulty_rating integer CHECK (difficulty_rating >= 1 AND difficulty_rating <= 5),
  notes text,
  completed_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercise_set_logs_pkey PRIMARY KEY (id),
  CONSTRAINT exercise_set_logs_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.active_workout_sessions(id),
  CONSTRAINT exercise_set_logs_exercise_id_fkey FOREIGN KEY (exercise_id) REFERENCES public.workout_exercises(id)
);
CREATE TABLE public.exercise_sets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid NOT NULL,
  user_id uuid NOT NULL,
  exercise_name character varying NOT NULL,
  exercise_index integer NOT NULL,
  set_number integer NOT NULL,
  target_reps integer,
  actual_reps integer,
  weight_kg numeric DEFAULT 0,
  rest_seconds integer DEFAULT 60,
  is_completed boolean DEFAULT false,
  is_warmup boolean DEFAULT false,
  is_failure boolean DEFAULT false,
  rpe numeric,
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  rest_started_at timestamp with time zone,
  rest_completed_at timestamp with time zone,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercise_sets_pkey PRIMARY KEY (id),
  CONSTRAINT exercise_sets_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.workout_sessions(id),
  CONSTRAINT exercise_sets_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.featured_content (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title character varying NOT NULL,
  subtitle character varying,
  content_type character varying NOT NULL,
  thumbnail_url text,
  youtube_url text,
  article_url text,
  workout_id uuid,
  author character varying,
  category character varying,
  duration character varying,
  views_count integer DEFAULT 0,
  is_active boolean DEFAULT true,
  display_order integer DEFAULT 0,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  active_from timestamp with time zone DEFAULT now(),
  active_until timestamp with time zone,
  CONSTRAINT featured_content_pkey PRIMARY KEY (id),
  CONSTRAINT featured_content_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workout_templates(id),
  CONSTRAINT featured_content_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.food_database (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  fdc_id text UNIQUE,
  name text NOT NULL,
  brand text,
  description text,
  calories numeric NOT NULL DEFAULT 0,
  protein numeric NOT NULL DEFAULT 0,
  carbs numeric NOT NULL DEFAULT 0,
  fats numeric NOT NULL DEFAULT 0,
  fiber numeric DEFAULT 0,
  sugar numeric DEFAULT 0,
  sodium numeric DEFAULT 0,
  serving_size numeric DEFAULT 100,
  serving_unit text DEFAULT 'g'::text,
  category text,
  is_custom boolean DEFAULT false,
  created_by uuid,
  total_logs integer DEFAULT 0,
  last_logged_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_database_pkey PRIMARY KEY (id),
  CONSTRAINT food_database_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.meal_plan_analytics (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  user_plan_id uuid,
  week_start_date date NOT NULL,
  week_end_date date NOT NULL,
  avg_calories integer,
  avg_protein integer,
  avg_carbs integer,
  avg_fats integer,
  days_tracked integer DEFAULT 0,
  days_completed integer DEFAULT 0,
  weekly_adherence_score numeric,
  protein_adherence numeric,
  carbs_adherence numeric,
  fats_adherence numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT meal_plan_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT meal_plan_analytics_user_plan_id_fkey FOREIGN KEY (user_plan_id) REFERENCES public.user_meal_plans(id),
  CONSTRAINT meal_plan_analytics_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.meal_plan_templates (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL,
  description text,
  duration_weeks integer NOT NULL DEFAULT 4,
  plan_type character varying NOT NULL,
  daily_calories integer NOT NULL,
  daily_protein integer NOT NULL,
  daily_carbs integer NOT NULL,
  daily_fats integer NOT NULL,
  daily_fiber integer,
  protein_percentage integer,
  carbs_percentage integer,
  fats_percentage integer,
  difficulty_level character varying,
  is_active boolean DEFAULT true,
  is_premium boolean DEFAULT false,
  meals_per_day integer DEFAULT 3,
  includes_snacks boolean DEFAULT true,
  tags ARRAY,
  image_url text,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT meal_plan_templates_pkey PRIMARY KEY (id),
  CONSTRAINT meal_plan_templates_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.message_reactions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  message_id uuid,
  user_id uuid,
  emoji text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT message_reactions_pkey PRIMARY KEY (id),
  CONSTRAINT message_reactions_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.channel_messages(id),
  CONSTRAINT message_reactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  message text NOT NULL,
  type text DEFAULT 'info'::text CHECK (type = ANY (ARRAY['info'::text, 'success'::text, 'warning'::text, 'error'::text])),
  target_audience text DEFAULT 'all'::text,
  status text DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'scheduled'::text, 'sent'::text, 'failed'::text])),
  scheduled_at timestamp with time zone,
  sent_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT notifications_pkey PRIMARY KEY (id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  nickname text,
  full_name text,
  avatar_url text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.registration_profiles (
  user_id uuid NOT NULL,
  gender text,
  age integer CHECK (age IS NULL OR age >= 13 AND age <= 120),
  height_cm integer CHECK (height_cm IS NULL OR height_cm > 30 AND height_cm < 300),
  weight_kg numeric CHECK (weight_kg IS NULL OR weight_kg > 10::numeric AND weight_kg < 700::numeric),
  use_metric boolean DEFAULT true,
  activity_level text,
  fitness_goal text,
  favorite_foods jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  details jsonb DEFAULT '{}'::jsonb,
  fitness_level text,
  training_location text,
  training_duration integer,
  muscle_focus text,
  injuries ARRAY,
  training_frequency text,
  meal_type text,
  restrictions ARRAY,
  meals_per_day integer,
  calorie_goal integer,
  onboarding_completed boolean DEFAULT false,
  completed_at timestamp with time zone,
  is_admin boolean DEFAULT false,
  account_status text DEFAULT 'active'::text CHECK (account_status = ANY (ARRAY['active'::text, 'suspended'::text, 'inactive'::text, 'banned'::text])),
  suspended_at timestamp with time zone,
  suspended_reason text,
  suspended_by uuid,
  CONSTRAINT registration_profiles_pkey PRIMARY KEY (user_id),
  CONSTRAINT registration_profiles_suspended_by_fkey FOREIGN KEY (suspended_by) REFERENCES auth.users(id),
  CONSTRAINT registration_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.steps_tracking (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  tracking_date date NOT NULL,
  step_count integer NOT NULL DEFAULT 0 CHECK (step_count >= 0 AND step_count < 100000),
  distance_km numeric,
  calories_burned integer,
  active_minutes integer,
  source character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT steps_tracking_pkey PRIMARY KEY (id),
  CONSTRAINT steps_tracking_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.subscription_packages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  slug text NOT NULL UNIQUE,
  name text NOT NULL,
  price numeric NOT NULL CHECK (price >= 0::numeric),
  billing_interval text NOT NULL CHECK (billing_interval = ANY (ARRAY['month'::text, 'year'::text, 'one_time'::text])),
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  features jsonb DEFAULT '[]'::jsonb,
  badge text,
  emoji text,
  accent_color text DEFAULT '#4A9EFF'::text,
  is_popular boolean DEFAULT false,
  sort_order integer DEFAULT 0,
  CONSTRAINT subscription_packages_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_badges (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  badge_id uuid NOT NULL,
  earned_at timestamp with time zone DEFAULT now(),
  progress integer DEFAULT 100,
  CONSTRAINT user_badges_pkey PRIMARY KEY (id),
  CONSTRAINT user_badges_badge_id_fkey FOREIGN KEY (badge_id) REFERENCES public.badges(id),
  CONSTRAINT user_badges_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_daily_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  steps_goal integer DEFAULT 10000,
  workouts_goal integer DEFAULT 1,
  calories_burn_goal integer DEFAULT 500,
  active_minutes_goal integer DEFAULT 30,
  water_intake_goal integer DEFAULT 8,
  calories_intake_goal integer DEFAULT 2000,
  protein_goal integer DEFAULT 150,
  goal_type character varying DEFAULT 'balanced'::character varying,
  difficulty_level character varying DEFAULT 'moderate'::character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_daily_goals_pkey PRIMARY KEY (id),
  CONSTRAINT user_daily_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_food_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  last_logged_at timestamp with time zone DEFAULT now(),
  log_count integer DEFAULT 1,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_food_history_pkey PRIMARY KEY (id),
  CONSTRAINT user_food_history_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.food_database(id),
  CONSTRAINT user_food_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  goal_type character varying NOT NULL CHECK (goal_type::text = ANY (ARRAY['weight'::character varying, 'steps'::character varying, 'workouts_per_week'::character varying, 'calories'::character varying, 'muscle_mass'::character varying, 'body_fat'::character varying]::text[])),
  target_value numeric NOT NULL,
  current_value numeric,
  start_date date NOT NULL,
  target_date date,
  status character varying DEFAULT 'active'::character varying CHECK (status::text = ANY (ARRAY['active'::character varying, 'achieved'::character varying, 'abandoned'::character varying, 'paused'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_goals_pkey PRIMARY KEY (id),
  CONSTRAINT user_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_meal_filters (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  filter_type text NOT NULL,
  filter_value text NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_meal_filters_pkey PRIMARY KEY (id),
  CONSTRAINT user_meal_filters_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_meal_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  meal_type text NOT NULL CHECK (meal_type = ANY (ARRAY['breakfast'::text, 'lunch'::text, 'dinner'::text, 'snack'::text])),
  meal_date date NOT NULL DEFAULT CURRENT_DATE,
  meal_time time without time zone,
  quantity numeric NOT NULL DEFAULT 1,
  serving_size numeric NOT NULL,
  serving_unit text DEFAULT 'g'::text,
  calories numeric NOT NULL,
  protein numeric NOT NULL,
  carbs numeric NOT NULL,
  fats numeric NOT NULL,
  fiber numeric DEFAULT 0,
  sugar numeric DEFAULT 0,
  sodium numeric DEFAULT 0,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_meal_logs_pkey PRIMARY KEY (id),
  CONSTRAINT user_meal_logs_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.food_database(id),
  CONSTRAINT user_meal_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_meal_plans (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  plan_id uuid NOT NULL,
  start_date date NOT NULL DEFAULT CURRENT_DATE,
  end_date date,
  is_active boolean DEFAULT true,
  custom_calories integer,
  custom_protein integer,
  custom_carbs integer,
  custom_fats integer,
  days_completed integer DEFAULT 0,
  adherence_score numeric,
  enrolled_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT user_meal_plans_pkey PRIMARY KEY (id),
  CONSTRAINT user_meal_plans_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public.meal_plan_templates(id),
  CONSTRAINT user_meal_plans_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_meals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  meal_type text NOT NULL CHECK (meal_type = ANY (ARRAY['breakfast'::text, 'lunch'::text, 'dinner'::text, 'snack'::text])),
  food_name text NOT NULL,
  brand text,
  quantity numeric NOT NULL DEFAULT 1,
  serving_size text,
  calories numeric NOT NULL DEFAULT 0,
  protein numeric NOT NULL DEFAULT 0,
  carbs numeric NOT NULL DEFAULT 0,
  fats numeric NOT NULL DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_meals_pkey PRIMARY KEY (id),
  CONSTRAINT user_meals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_saved_workouts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  template_id uuid NOT NULL,
  workout_name character varying NOT NULL,
  workout_type character varying DEFAULT 'Pre-Made'::character varying,
  scheduled_day_of_week integer CHECK (scheduled_day_of_week >= 0 AND scheduled_day_of_week <= 6),
  is_scheduled boolean DEFAULT false,
  times_completed integer DEFAULT 0,
  last_completed_at timestamp with time zone,
  total_time_spent integer DEFAULT 0,
  total_calories_burned integer DEFAULT 0,
  is_favorite boolean DEFAULT false,
  custom_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_saved_workouts_pkey PRIMARY KEY (id),
  CONSTRAINT user_saved_workouts_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.workout_templates(id),
  CONSTRAINT user_saved_workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_stats (
  user_id uuid NOT NULL,
  total_points integer DEFAULT 0,
  current_streak integer DEFAULT 0,
  longest_streak integer DEFAULT 0,
  total_workouts integer DEFAULT 0,
  total_calories_burned integer DEFAULT 0,
  total_exercises_completed integer DEFAULT 0,
  badges_earned integer DEFAULT 0,
  challenges_completed integer DEFAULT 0,
  rank_position integer,
  last_workout_date date,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  total_steps integer DEFAULT 0,
  CONSTRAINT user_stats_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_stats_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_subscriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  package_id uuid NOT NULL,
  status text NOT NULL CHECK (status = ANY (ARRAY['pending'::text, 'active'::text, 'cancelled'::text])),
  started_at timestamp with time zone,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT user_subscriptions_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.subscription_packages(id),
  CONSTRAINT user_subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_workout_preferences (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  category_id uuid NOT NULL,
  is_favorite boolean DEFAULT true,
  added_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_workout_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_workout_preferences_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.workout_categories(id),
  CONSTRAINT user_workout_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_workout_schedule (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  template_id uuid NOT NULL,
  day_of_week integer NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6),
  time_of_day character varying,
  is_active boolean DEFAULT true,
  week_number integer DEFAULT 1,
  order_index integer DEFAULT 0,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_workout_schedule_pkey PRIMARY KEY (id),
  CONSTRAINT user_workout_schedule_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.workout_templates(id),
  CONSTRAINT user_workout_schedule_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.weight_tracking (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  measurement_date date NOT NULL,
  weight_kg numeric NOT NULL CHECK (weight_kg > 0::numeric AND weight_kg < 500::numeric),
  body_fat_percentage numeric,
  muscle_mass_kg numeric,
  water_percentage numeric,
  notes text,
  measurement_time time without time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT weight_tracking_pkey PRIMARY KEY (id),
  CONSTRAINT weight_tracking_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL UNIQUE,
  description text,
  icon character varying,
  emoji character varying,
  color character varying NOT NULL,
  workout_count integer DEFAULT 0,
  image_url text,
  display_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_categories_pkey PRIMARY KEY (id)
);
CREATE TABLE public.workout_exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  template_id uuid NOT NULL,
  exercise_name character varying NOT NULL,
  description text,
  sets integer NOT NULL DEFAULT 3,
  reps character varying,
  rest_seconds integer DEFAULT 60,
  calories_per_set integer DEFAULT 10,
  muscle_groups jsonb DEFAULT '[]'::jsonb,
  equipment jsonb DEFAULT '[]'::jsonb,
  video_url text,
  tips jsonb DEFAULT '[]'::jsonb,
  order_index integer NOT NULL,
  is_warmup boolean DEFAULT false,
  is_cooldown boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT workout_exercises_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.workout_templates(id)
);
CREATE TABLE public.workout_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  workout_name character varying NOT NULL,
  workout_type character varying,
  workout_category_id uuid,
  workout_template_id uuid,
  duration_minutes integer NOT NULL,
  calories_burned integer DEFAULT 0,
  exercises_count integer DEFAULT 0,
  total_sets integer DEFAULT 0,
  total_reps integer DEFAULT 0,
  total_volume_kg numeric DEFAULT 0,
  avg_heart_rate integer,
  max_heart_rate integer,
  intensity_level character varying,
  status character varying DEFAULT 'completed'::character varying,
  notes text,
  started_at timestamp with time zone,
  completed_at timestamp with time zone NOT NULL DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  log_date date,
  is_part_of_streak boolean DEFAULT true,
  distance_km numeric,
  pace character varying,
  exercises ARRAY,
  personal_records ARRAY,
  CONSTRAINT workout_logs_pkey PRIMARY KEY (id),
  CONSTRAINT workout_logs_workout_category_id_fkey FOREIGN KEY (workout_category_id) REFERENCES public.workout_categories(id),
  CONSTRAINT workout_logs_workout_template_id_fkey FOREIGN KEY (workout_template_id) REFERENCES public.workout_templates(id),
  CONSTRAINT workout_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_personal_records (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  exercise_name character varying NOT NULL,
  pr_type character varying NOT NULL,
  weight_kg numeric,
  reps integer,
  total_volume_kg numeric,
  duration_seconds integer,
  session_id uuid,
  set_id uuid,
  achieved_at timestamp with time zone NOT NULL DEFAULT now(),
  previous_value numeric,
  improvement_percentage numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_personal_records_pkey PRIMARY KEY (id),
  CONSTRAINT workout_personal_records_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.workout_sessions(id),
  CONSTRAINT workout_personal_records_set_id_fkey FOREIGN KEY (set_id) REFERENCES public.exercise_sets(id),
  CONSTRAINT workout_personal_records_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_session_exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid NOT NULL,
  user_id uuid NOT NULL,
  exercise_name character varying NOT NULL,
  exercise_index integer NOT NULL,
  target_sets integer NOT NULL,
  target_reps character varying,
  completed_sets integer DEFAULT 0,
  is_completed boolean DEFAULT false,
  total_reps integer DEFAULT 0,
  total_volume_kg numeric DEFAULT 0,
  avg_weight_kg numeric DEFAULT 0,
  max_weight_kg numeric DEFAULT 0,
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  total_duration_seconds integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_session_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT workout_session_exercises_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.workout_sessions(id),
  CONSTRAINT workout_session_exercises_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  workout_template_id uuid,
  workout_name character varying NOT NULL,
  workout_type character varying,
  category_id uuid,
  started_at timestamp with time zone NOT NULL DEFAULT now(),
  completed_at timestamp with time zone,
  paused_at timestamp with time zone,
  total_pause_duration integer DEFAULT 0,
  status character varying DEFAULT 'in_progress'::character varying,
  current_exercise_index integer DEFAULT 0,
  total_exercises integer NOT NULL,
  completed_exercises integer DEFAULT 0,
  total_duration_seconds integer,
  total_sets_completed integer DEFAULT 0,
  total_reps_completed integer DEFAULT 0,
  total_volume_kg numeric DEFAULT 0,
  estimated_calories_burned integer DEFAULT 0,
  notes text,
  difficulty_rating integer,
  energy_level character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT workout_sessions_workout_template_id_fkey FOREIGN KEY (workout_template_id) REFERENCES public.workout_templates(id),
  CONSTRAINT workout_sessions_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.workout_categories(id),
  CONSTRAINT workout_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  category_id uuid NOT NULL,
  name character varying NOT NULL,
  description text,
  difficulty character varying CHECK (difficulty::text = ANY (ARRAY['Beginner'::character varying, 'Intermediate'::character varying, 'Advanced'::character varying]::text[])),
  duration_minutes integer NOT NULL,
  estimated_calories integer,
  equipment jsonb DEFAULT '[]'::jsonb,
  muscle_groups jsonb DEFAULT '[]'::jsonb,
  thumbnail_url text,
  video_url text,
  is_premium boolean DEFAULT false,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_custom boolean DEFAULT false,
  created_by_user_id uuid,
  CONSTRAINT workout_templates_pkey PRIMARY KEY (id),
  CONSTRAINT workout_templates_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.workout_categories(id),
  CONSTRAINT workout_templates_created_by_user_id_fkey FOREIGN KEY (created_by_user_id) REFERENCES auth.users(id)
);